//package assigmcp;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import javax.swing.*;
import java.awt.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.util.ArrayList;

/**
 *
 * @author PC
 */
public class AssigMCP extends javax.swing.JFrame {

    /**
     * Creates new form AssigMCP
     */
    Mainpage mainpage;
    Data data = new Data();
    public AssigMCP(Mainpage mainpage) {
        this.mainpage = mainpage;
        initComponents();
        setLocationRelativeTo(null);
        this.setTitle("AssigMCP");
    }
    /*public AssigMCP() {
        initComponents();
        setLocationRelativeTo(null);
        this.setTitle("AssigMCP");
        this.Generate_data();
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        InsertMCP = new javax.swing.JButton();
        DeleteMCP = new javax.swing.JButton();
        //AlternativeMCP = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(85, 65, 118));

        InsertMCP.setBackground(new java.awt.Color(85, 65, 118));
        InsertMCP.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        InsertMCP.setForeground(new java.awt.Color(204, 204, 204));
        InsertMCP.setText("Manage Janitor");
        InsertMCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageJanitorActionPerformed(evt);
            }
        });

        DeleteMCP.setBackground(new java.awt.Color(85, 65, 118));
        DeleteMCP.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        DeleteMCP.setForeground(new java.awt.Color(204, 204, 204));
        DeleteMCP.setText("Manage MCP");
        DeleteMCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageMCPActionPerformed(evt);
            }
        });

        /*AlternativeMCP.setBackground(new java.awt.Color(85, 65, 118));
        AlternativeMCP.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AlternativeMCP.setForeground(new java.awt.Color(204, 204, 204));
        AlternativeMCP.setText("Alternative");
        AlternativeMCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlternativeMCPActionPerformed(evt);
            }
        });*/

        BackButton.setText("Back");
        BackButton.setToolTipText("");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 342, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            //.addComponent(AlternativeMCP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeleteMCP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InsertMCP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(InsertMCP, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeleteMCP, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                //.addComponent(AlternativeMCP, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void ManageMCPActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        this.jPanel1.removeAll();
        this.jPanel1.repaint();
        System.out.println("AssigMCP : Clicked AddMCPbutton");
        JLabel JanitorLabel = new JLabel("Choose a Janitor:");
        JComboBox JanitorChooser = new JComboBox();
        JLabel CurMCPs = new JLabel("Current MCPs:");
        JScrollPane CurMCPpane = new JScrollPane();
        JList CurMCPList = new JList();
        JScrollPane AvailableMCPpane = new JScrollPane();
        JList AvailableMCPList = new JList();
        JButton RemoveButton = new JButton("Remove");
        JLabel AvaiMCP = new JLabel("Available MCPs:");
        JButton AddButton = new JButton("Add");
        DefaultListModel CurrentMCP = new DefaultListModel();
        DefaultListModel AvailableMCP = new DefaultListModel();
        
        CurMCPpane.setViewportView(CurMCPList);
        AvailableMCPpane.setViewportView(AvailableMCPList);
        
        int size = this.data.Janitors_data.size();
        for(int i = 0 ; i < size ; i++){
                    JanitorChooser.addItem(this.data.Janitors_data.get(i).name);
        }
        
        JanitorChooser.setSelectedIndex(-1);
        
        JanitorChooser.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt){
                String janitorName = JanitorChooser.getSelectedItem().toString();
                Janitor janitor = Function.getJanitorByName(janitorName);
                CurrentMCP.removeAllElements();
                AvailableMCP.removeAllElements();
                int size;
                if(janitor.MCPList == null) size = 0;
                else size = janitor.MCPList.size();
                for(int i = 0 ; i < size ; i++){
                    CurrentMCP.addElement("MCP "+janitor.MCPList.get(i).id);
                }
                Function.showObjectonList(CurrentMCP,CurMCPList, CurMCPpane);
                size = AssigMCP.this.data.MCPs_data.size();
                for(int i = 0 ; i < size ; i++){
                    MCP mcp = AssigMCP.this.data.MCPs_data.get(i);
                    if(mcp.janitor == null) AvailableMCP.addElement("MCP "+mcp.id);
                }
                Function.showObjectonList(AvailableMCP, AvailableMCPList, AvailableMCPpane);
            }
        });
        
        CurMCPList.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent evt){
                if(evt.getClickCount() >= 2){
                    Janitor janitor = Function.getJanitorByName(JanitorChooser.getSelectedItem().toString());
                    int MCPid = Integer.parseInt(CurMCPList.getSelectedValue().toString().split("MCP ")[1]); 
                    MCP mcp = Function.getMcpByID(MCPid);
                    mcp.janitor = null;
                    janitor.MCPList.remove(mcp);
                    //janitor.setDistance();
                    CurrentMCP.removeElement("MCP " + mcp.id);
                    AvailableMCP.addElement("MCP "+mcp.id);
                    Function.showObjectonList(CurrentMCP, CurMCPList, CurMCPpane);
                    Function.showObjectonList(AvailableMCP, AvailableMCPList,AvailableMCPpane);
                }
            }
        });
        
        AvailableMCPList.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent evt){
                if(evt.getClickCount() >= 2){
                    Janitor janitor = Function.getJanitorByName(JanitorChooser.getSelectedItem().toString());
                    int MCPid = Integer.parseInt(AvailableMCPList.getSelectedValue().toString().split("MCP ")[1]);
                    MCP mcp = Function.getMcpByID(MCPid);
                    mcp.janitor = janitor;
                    janitor.MCPList.add(mcp);
                    //janitor.setDistance();
                    CurrentMCP.addElement("MCP " + mcp.id);
                    AvailableMCP.removeElement("MCP "+mcp.id);
                    Function.showObjectonList(CurrentMCP, CurMCPList, CurMCPpane);
                    Function.showObjectonList(AvailableMCP, AvailableMCPList,AvailableMCPpane);
                }
                
            }
        });
        
        this.jPanel1.add(JanitorLabel);
        JanitorLabel.setBounds(35, 10, 100, 20);
        
        this.jPanel1.add(JanitorChooser);
        JanitorChooser.setBounds(35, 30, 100, 30);
        
        this.jPanel1.add(CurMCPs);
        CurMCPs.setBounds(35, 60, 100, 20);
        
        this.jPanel1.add(CurMCPpane);
        CurMCPpane.setBounds(35, 80, 130, 80);
        
        this.jPanel1.add(RemoveButton);
        RemoveButton.setBounds(60,160,80,25);
        
        this.jPanel1.add(AvaiMCP);
        AvaiMCP.setBounds(35,185,100,20);
        
        this.jPanel1.add(AvailableMCPpane);
        AvailableMCPpane.setBounds(35, 205, 130, 90);
        
        this.jPanel1.add(AddButton);
        AddButton.setBounds(75,300,50,25);
        
        AddButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt){
                Janitor janitor = Function.getJanitorByName(JanitorChooser.getSelectedItem().toString());
                    int MCPid = Integer.parseInt(AvailableMCPList.getSelectedValue().toString().split("MCP ")[1]);
                    MCP mcp = Function.getMcpByID(MCPid);
                    mcp.janitor = janitor;
                    janitor.MCPList.add(mcp);
                    //janitor.setDistance();
                    CurrentMCP.addElement("MCP " + mcp.id);
                    AvailableMCP.removeElement("MCP "+mcp.id);
                    Function.showObjectonList(CurrentMCP, CurMCPList, CurMCPpane);
                    Function.showObjectonList(AvailableMCP, AvailableMCPList,AvailableMCPpane);
            }
        });
        
        RemoveButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt){
                Janitor janitor = Function.getJanitorByName(JanitorChooser.getSelectedItem().toString());
                int MCPid = Integer.parseInt(CurMCPList.getSelectedValue().toString().split("MCP ")[1]); 
                MCP mcp = Function.getMcpByID(MCPid);
                mcp.janitor = null;
                janitor.MCPList.remove(mcp);
                //janitor.setDistance();
                CurrentMCP.removeElement("MCP " + mcp.id);
                AvailableMCP.addElement("MCP "+mcp.id);
                Function.showObjectonList(CurrentMCP, CurMCPList, CurMCPpane);
                Function.showObjectonList(AvailableMCP, AvailableMCPList,AvailableMCPpane);
            }
        });
    }                                         

    private void ManageJanitorActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        this.jPanel1.removeAll();
        this.jPanel1.repaint();
        System.out.println(this.jPanel1.getSize());
        System.out.println("Routig : Clicked Manage Janitor button");
        JButton Save = new JButton("Add");
        JLabel JanitorName = new JLabel("Janitor Name:");
        JList AvailableJanitor = new JList();
        JButton addButton = new JButton("Del");
        JTextField JanitorNamefield = new JTextField("Enter Janitor Name");
        //JList Selected = new JList();
        JScrollPane Janitorlist = new JScrollPane();
        //JScrollPane SelectedJanitorlist = new JScrollPane();
        
        this.jPanel1.add(JanitorName);
        JanitorName.setBounds(34,10,100,20);

        this.jPanel1.add(JanitorNamefield);
        JanitorNamefield.setBounds(29,30,140,30);

        this.jPanel1.add(Save);
        Save.setBounds(75,65,60,25);
        
        DefaultListModel<String> Janitor_list = new DefaultListModel<>();
        for(Janitor val: this.data.Janitors_data){
            //if(val.janitor == null){
            Janitor_list.addElement(val.name);
            //}
        }
        AvailableJanitor.setModel(Janitor_list);
        JLabel Janitorlabel = new JLabel("Available Janitors:");
        this.jPanel1.add(Janitorlabel);
        Janitorlabel.setBounds(27,100,125,20);
        Janitorlist.setViewportView(AvailableJanitor);
        //SelectedJanitorlist.setViewportView(Selected);
        
        this.jPanel1.add(Janitorlist);
        Janitorlist.setBounds(29,120,145, 93);
        
        //this.jPanel1.add(SelectedJanitorlist);
        //SelectedJanitorlist.setBounds(29, 215, 145, 93);
        
        //DefaultListModel<String> SelectedJanitor = new DefaultListModel<>();
        this.jPanel1.add(addButton);
        addButton.setBounds(74,220,60,25);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String select = AvailableJanitor.getSelectedValue().toString();
                System.out.println("AssigMCP->Create Janitor: Delete "+select);
                //SelectedJanitor.addElement(select);
                Janitor_list.removeElement(select);
                AvailableJanitor.setModel(Janitor_list);
                //Selected.setModel(SelectedJanitor);
                Janitorlist.setViewportView(AvailableJanitor);
                //SelectedJanitorlist.setViewportView(Selected);
                Janitor janitor = Function.getJanitorByName(select);
                if(janitor.MCPList.size()!=0){
                    for(MCP mcp:janitor.MCPList){
                        mcp.janitor = null;
                    }
                }
                AssigMCP.this.data.Janitors_data.remove(janitor);
            }
        });
        
        AvailableJanitor.addMouseListener(new MouseAdapter(){
                public void mouseClicked(MouseEvent evt) {
                    if (evt.getClickCount() >= 2) {
                        String select = AvailableJanitor.getSelectedValue().toString();
                        if(select.equals("")) return;
                        System.out.println("AssigMCP->Create Janitor: Added "+select);
                        //SelectedJanitor.addElement(select);
                        Janitor_list.removeElement(select);
                        AvailableJanitor.setModel(Janitor_list);
                        //Selected.setModel(SelectedJanitor);
                        Janitorlist.setViewportView(AvailableJanitor);
                        //SelectedJanitorlist.setViewportView(Selected);
                        AssigMCP.this.data.Janitors_data.remove(Integer.parseInt(select.split("Janitor ")[1]));
                    }
                }
        });
        
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               //ListModel model = Selected.getModel();
               String JanitorName = JanitorNamefield.getText();
               if(JanitorName.equals("") || JanitorName.equals("Enter Janitor Name")){
                   JOptionPane.showMessageDialog(AssigMCP.this,"Enter Janitor Name:");
                   return;
               }
               int JanitorID = AssigMCP.this.data.Janitors_data.size();
               Janitor newJanitor = new Janitor(JanitorID,JanitorName);
               //ArrayList<MCP> MCPList = new ArrayList<>();
               /*for(int i = 0; i < model.getSize();i++){
                   int id = Integer.parseInt(model.getElementAt(i).toString().split("MCP ")[1]);
                   MCP mcp = AssigMCP.this.data.MCPs_data.get(id);
                   mcp.janitor = newJanitor; 
                   MCPList.add(mcp);
               }*/
               //newJanitor.MCPList = MCPList;
               //newJanitor.setDistance();
               //newJanitor.Not_Optimized.add(newRoute);
               AssigMCP.this.data.Janitors_data.add(newJanitor);
               JOptionPane.showMessageDialog(AssigMCP.this,"Saved");
               AssigMCP.this.ManageJanitorActionPerformed(evt);
            }
        });    
    }                                         

    //private void AlternativeMCPActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        
    //}                                              

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        System.out.println("AssigMCP : Clicked Back button");
        this.mainpage.setVisible(true);
        this.dispose();
        this.setVisible(false);
    }                                          

    /**
     * @param args the command line arguments
    */

    // Variables declaration - do not modify                     
    //private javax.swing.JButton AlternativeMCP;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton DeleteMCP;
    private javax.swing.JButton InsertMCP;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration                   
}
