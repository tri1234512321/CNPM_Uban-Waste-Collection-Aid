
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author TUNG
 */

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.ArrayList;
public class Data_info extends javax.swing.JFrame {

    /**
     * Creates new form Data_info
     */
    Data data = new Data();
    public Data_info() {
        initComponents();
        this.ObjectChooser.addItem("Route");
        this.ObjectChooser.addItem("MCP");
        this.ObjectChooser.addItem("Collector");
        this.ObjectChooser.addItem("Janitor");
        this.ObjectChooser.addItem("Vechicle");
        this.ObjectChooser.setSelectedIndex(-1);
        this.setTitle("Infomation");
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        ObjectChooser = new javax.swing.JComboBox<>();
        GetButton = new javax.swing.JButton();
        SearchField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ObjectPane = new javax.swing.JScrollPane();
        ObjectList = new javax.swing.JList<>();
        BackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(85, 65, 118));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 295, -1, -1));

        jPanel1.setBackground(new java.awt.Color(85, 65, 118));

        ObjectChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ObjectChooserActionPerformed(evt);
            }
        });

        GetButton.setText("Get");
        GetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetButtonActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Result:");

        ObjectList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ObjectListMouseClicked(evt);
            }
        });
        ObjectPane.setViewportView(ObjectList);

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(ObjectPane, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SearchField)
                            .addComponent(ObjectChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ObjectChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GetButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ObjectPane, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BackButton)
                .addGap(18, 18, 18))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 410, 350));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ObjectChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ObjectChooserActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ObjectChooserActionPerformed

    private void GetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetButtonActionPerformed
        // TODO add your handling code here:
        String selected;
        if(this.ObjectChooser.getSelectedItem() == null) return;
        selected = this.ObjectChooser.getSelectedItem().toString();
        DefaultListModel listmodel = new DefaultListModel();
        Function.getData(listmodel,selected);
        Function.showObjectonList(listmodel,this.ObjectList, this.ObjectPane);
    }//GEN-LAST:event_GetButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        String searchString;
        if((searchString = this.SearchField.getText()).equals("")){
            JOptionPane.showMessageDialog(this, "Enter something to search");
        }
        String selected = this.ObjectChooser.getSelectedItem().toString();
        DefaultListModel listmodel = new DefaultListModel();
        Function.search(listmodel, searchString,selected);
        Function.showObjectonList(listmodel,this.ObjectList, this.ObjectPane);
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ObjectListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ObjectListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() >= 2) {
            String select = ObjectList.getSelectedValue();
            String out = new String();
            switch(this.ObjectChooser.getSelectedItem().toString()){
                case "Route":
                    Route route = Function.getRouteByName(select);
                    out = out + "Route name: "+route.name;
                    out = out +"\nID: "+ route.id;
                    if(route.vechicle == null) out = out + "\nVechicleID: null";
                    else out = out + "\nVechicleID: " + route.vechicle.id;
                    String MCPs = new String("\nMCPs: ");
                    if(!route.ListMCPs.isEmpty()){
                        int size = route.ListMCPs.size();
                        MCPs = MCPs + "MCP "+route.ListMCPs.get(0).id;
                        for(int i = 1; i < size ; i++){
                            MCP mcp = route.ListMCPs.get(i);
                            MCPs = MCPs + "->MCP " +mcp.id; 
                        }
                    }
                    if(MCPs.equals("\nMCPs: ")) out = out + MCPs +"null";
                    else out = out + MCPs;
                    out = out + "\nDistance: " + route.distance+" km";
                    JOptionPane.showMessageDialog(this, out,"Route Info",1);
                    break;
                case "Collector":
                    Collector collector = Function.getCollectorByname(select);
                    out = out + "Name: "+collector.name +"\nID: "+collector.id;
                    if(collector.vechicle==null) out = out + "\nVechicleID: null";
                    else out = out + "\nVechicleID: " +collector.vechicle.id;
                    JOptionPane.showMessageDialog(this, out,"Collector Info",1);
                    break;
                case "Janitor":
                    Janitor janitor = Function.getJanitorByName(select);
                    out = out + "Name: "+janitor.name+ "\nID: "+janitor.id;
                    if(janitor.MCPList.isEmpty()) out = out + "\nMCPs: null";
                    else{
                        String mcps = new String("\nMCPs: ");
                        int size = janitor.MCPList.size();
                        mcps = mcps + "MCP "+janitor.MCPList.get(0).id;
                        for(int i = 1; i < size ; i++){
                            MCP mcp = janitor.MCPList.get(i);
                            mcps = mcps + ",MCP " +mcp.id; 
                        }
                        out = out + mcps;
                    }
                    JOptionPane.showMessageDialog(Data_info.this, out,"Janitor info",1);
                    break;
                case "MCP":
                    int MCPid = Integer.parseInt(select.split("MCP ")[1]);
                    MCP mcp = Function.getMcpByID(MCPid);
                    out = out + "MCPID: "+mcp.id + "\nLocation: "+mcp.location;
                    if(mcp.janitor != null) out = out +"\nJanitor: "+mcp.janitor.name;
                    else out = out+ "\nJanitor: null";
                    if(mcp.route != null) out = out  +"\nRoute: "+mcp.route.name;
                    else out = out + "\nRoute: null";
                    JOptionPane.showMessageDialog(Data_info.this, out, "MCP info", 1);
                    break;
                case "Vechicle":
                    int id = Integer.parseInt(select.split("Vechicle ")[1]);
                    Vechicle vec = Function.getVecByID(id);
                    out = out + "VechicleID: "+vec.id+"\nFuel consuption: "+
                            vec.fuel_consumption+" l/km";
                    if(vec.collector == null) out = out + "\nCollector: null";
                    else out =out + "\nCollector: "+vec.collector.name;
                    if(vec.route == null) out = out + "\nRoute: null";
                    else out = out + "\nRoute: "+vec.route.name;
                    JOptionPane.showMessageDialog(Data_info.this, out, "Vechicle info", 1);
                    break;
            }
        }
    }//GEN-LAST:event_ObjectListMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton GetButton;
    private javax.swing.JComboBox<String> ObjectChooser;
    private javax.swing.JList<String> ObjectList;
    private javax.swing.JScrollPane ObjectPane;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
