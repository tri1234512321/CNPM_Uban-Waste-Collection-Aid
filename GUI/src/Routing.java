/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author TUNG
 */
import javax.swing.*;
import java.awt.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.util.ArrayList;

public class Routing extends javax.swing.JFrame{
    
    /**
     * Creates new form Routing
     */
    Mainpage mainpage;
    Data data = new Data();
    public Routing(Mainpage mainpage) {
        this.mainpage = mainpage;
        initComponents();
        setLocationRelativeTo(null);
        this.setTitle("Routing");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        CreateRouteButton = new javax.swing.JButton();
        AssignVecButton = new javax.swing.JButton();
        ManageRouteButton = new javax.swing.JButton();
        OptimizeButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1024, 1024));

        jPanel2.setBackground(new java.awt.Color(85, 65, 118));

        CreateRouteButton.setBackground(new java.awt.Color(85, 65, 118));
        CreateRouteButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CreateRouteButton.setForeground(new java.awt.Color(204, 204, 204));
        CreateRouteButton.setText("Create Route");
        CreateRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateRouteButtonActionPerformed(evt);
            }
        });

        AssignVecButton.setBackground(new java.awt.Color(85, 65, 118));
        AssignVecButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AssignVecButton.setForeground(new java.awt.Color(204, 204, 204));
        AssignVecButton.setText("Assign Vechicle");
        AssignVecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignVecButtonActionPerformed(evt);
            }
        });

        ManageRouteButton.setBackground(new java.awt.Color(85, 65, 118));
        ManageRouteButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ManageRouteButton.setForeground(new java.awt.Color(204, 204, 204));
        ManageRouteButton.setText("Manage Route");
        ManageRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageRouteButtonActionPerformed(evt);
            }
        });

        OptimizeButton.setBackground(new java.awt.Color(85, 65, 118));
        OptimizeButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        OptimizeButton.setForeground(new java.awt.Color(204, 204, 204));
        OptimizeButton.setText("Optimize");
        OptimizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptimizeButtonActionPerformed(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.setToolTipText("");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 342, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OptimizeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ManageRouteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AssignVecButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateRouteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(CreateRouteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AssignVecButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ManageRouteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OptimizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OptimizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptimizeButtonActionPerformed
        // TODO add your handling code here:
        this.jPanel1.removeAll();
        this.jPanel1.repaint();
        int size1 = this.data.Routes_data.size();
        int size2 = this.data.Vechicles_data.size();
        String[] col = {"Route","VecID"};
        String[][] data = new String[size1][size2];
        JTable table = new JTable(data,col);
        JScrollPane pane = new JScrollPane();
        this.jPanel1.add(pane);
        pane.setBounds(25,60,150,200);
        pane.setViewportView(table);
        pane.setBackground(new Color(200,200,200));
        if(size1 > size2 ){
            JOptionPane.showMessageDialog(this, "There won't be enough vechicle for all routes","Warning",0);
            size1 = size2;
        }
        for(int i = 0 ; i < size1 ; i++){
            Route route = Function.getMinRouteNotOptimized();
            if(route == null){
                JOptionPane.showMessageDialog(this,"All Routes are optimized");
                return;
            }
             if(route.distance == 9999999) break;
            Vechicle vec = Function.getMaxConsumptionVec();
            if(vec == null){
                JOptionPane.showMessageDialog(this,"All Vechicles are optimized");
                return;
            }
            if(route.vechicle != null) route.vechicle.route = null;
            route.vechicle = vec;
            vec.route = route;
            route.optimized = true;
            route.Not_Optimized.remove(route);
            vec.optimzed = true;
            vec.Not_Optimized.remove(vec);
            String[] add = {route.name,"Vec: "+vec.id};
            data[i] = add;
        }
        DefaultTableModel model = new DefaultTableModel(data,col);
        table.setModel(model);
    }//GEN-LAST:event_OptimizeButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Routing : Clicked Back button");
        this.mainpage.setVisible(true);
        this.dispose();
        this.setVisible(false);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void CreateRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateRouteButtonActionPerformed
        // TODO add your handling code here:
        this.jPanel1.removeAll();
        this.jPanel1.repaint();
        System.out.println(this.jPanel1.getSize());
        System.out.println("Routig : Clicked Create Route button");
        JButton Save = new JButton("Save");
        JLabel Routename = new JLabel("Route Name:");
        JList AvailableMCP = new JList();
        JButton addButton = new JButton("Add");
        JTextField Routenamefield = new JTextField("Enter Route Name");
        JList Selected = new JList();
        JScrollPane MCPlist = new JScrollPane();
        JScrollPane SelectedMCPlist = new JScrollPane();
        
        this.jPanel1.add(Routename);
        Routename.setBounds(34,10,100,20);

        this.jPanel1.add(Routenamefield);
        Routenamefield.setBounds(29,30,140,30);

        this.jPanel1.add(Save);
        Save.setBounds(75,310,60,25);
        
        DefaultListModel<String> MCP_list = new DefaultListModel<>();
        for(MCP val: this.data.MCPs_data){
            if(val.route == null){
                MCP_list.addElement("MCP "+ val.id);
            }
        }
        AvailableMCP.setModel(MCP_list);
        JLabel MCPlabel = new JLabel("Available MCPs:");
        this.jPanel1.add(MCPlabel);
        MCPlabel.setBounds(34,70,100,20);
        MCPlist.setViewportView(AvailableMCP);
        SelectedMCPlist.setViewportView(Selected);
        
        this.jPanel1.add(MCPlist);
        MCPlist.setBounds(29,90,145, 93);
        
        this.jPanel1.add(SelectedMCPlist);
        SelectedMCPlist.setBounds(29, 205, 145, 93);
        
        DefaultListModel<String> SelectedMCP = new DefaultListModel<>();
        this.jPanel1.add(addButton);
        addButton.setBounds(74,180,60,25);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String select = AvailableMCP.getSelectedValue().toString();
                System.out.println("Routing->Create Route: Added "+select);
                SelectedMCP.addElement(select);
                MCP_list.removeElement(select);
                AvailableMCP.setModel(MCP_list);
                Selected.setModel(SelectedMCP);
                MCPlist.setViewportView(AvailableMCP);
                SelectedMCPlist.setViewportView(Selected);
            }
        });
        
        AvailableMCP.addMouseListener(new MouseAdapter(){
                public void mouseClicked(MouseEvent evt) {
                    if (evt.getClickCount() >= 2) {
                        String select = AvailableMCP.getSelectedValue().toString();
                        if(select.equals("")) return;
                        System.out.println("Routing->Create Route: Added "+select);
                        SelectedMCP.addElement(select);
                        MCP_list.removeElement(select);
                        AvailableMCP.setModel(MCP_list);
                        Selected.setModel(SelectedMCP);
                        MCPlist.setViewportView(AvailableMCP);
                        SelectedMCPlist.setViewportView(Selected);
                    }
                }
        });
        
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               ListModel model = Selected.getModel();
               String RouteName = Routenamefield.getText();
               if(RouteName.equals("") || RouteName.equals("Enter Route Name")){
                   JOptionPane.showMessageDialog(Routing.this,"Enter Route Name:");
                   return;
               }
               int RouteID = Routing.this.data.Routes_data.size();
               Route newRoute = new Route(RouteID,RouteName);
               ArrayList<MCP> MCPList = new ArrayList<>();
               for(int i = 0; i < model.getSize();i++){
                   int id = Integer.parseInt(model.getElementAt(i).toString().split("MCP ")[1]);
                   MCP mcp = Routing.this.data.MCPs_data.get(id);
                   mcp.route = newRoute; 
                   MCPList.add(mcp);
               }
               newRoute.ListMCPs = MCPList;
               newRoute.setDistance();
               newRoute.Not_Optimized.add(newRoute);
               Routing.this.data.Routes_data.add(newRoute);
               JOptionPane.showMessageDialog(Routing.this,"Saved");
               Routing.this.CreateRouteButtonActionPerformed(evt);
            }
        });
    }//GEN-LAST:event_CreateRouteButtonActionPerformed

    private void ManageRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManageRouteButtonActionPerformed
        // TODO add your handling code here:
        this.jPanel1.removeAll();
        this.jPanel1.repaint();
        System.out.println("Routing : Clicked ManageRouteButton");
        JLabel RouteLabel = new JLabel("Choose a Route:");
        JComboBox RouteChooser = new JComboBox();
        JLabel CurMCPs = new JLabel("Current MCPs:");
        JScrollPane CurMCPpane = new JScrollPane();
        JList CurMCPList = new JList();
        JScrollPane AvailableMCPpane = new JScrollPane();
        JList AvailableMCPList = new JList();
        JButton RemoveButton = new JButton("Remove");
        JLabel AvaiMCP = new JLabel("Available MCPs:");
        JButton AddButton = new JButton("Add");
        DefaultListModel CurrentMCP = new DefaultListModel();
        DefaultListModel AvailableMCP = new DefaultListModel();
        
        CurMCPpane.setViewportView(CurMCPList);
        AvailableMCPpane.setViewportView(AvailableMCPList);
        
        int size = this.data.Routes_data.size();
        for(int i = 0 ; i < size ; i++){
                    RouteChooser.addItem(this.data.Routes_data.get(i).name);
        }
        
        RouteChooser.setSelectedIndex(-1);
        
        RouteChooser.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt){
                String routeName = RouteChooser.getSelectedItem().toString();
                Route route = Function.getRouteByName(routeName);
                CurrentMCP.removeAllElements();
                AvailableMCP.removeAllElements();
                int size;
                if(route.ListMCPs == null) size = 0;
                else size = route.ListMCPs.size();
                for(int i = 0 ; i < size ; i++){
                    CurrentMCP.addElement("MCP "+route.ListMCPs.get(i).id);
                }
                Function.showObjectonList(CurrentMCP,CurMCPList, CurMCPpane);
                size = Routing.this.data.MCPs_data.size();
                for(int i = 0 ; i < size ; i++){
                    MCP mcp = Routing.this.data.MCPs_data.get(i);
                    if(mcp.route == null) AvailableMCP.addElement("MCP "+mcp.id);
                }
                Function.showObjectonList(AvailableMCP, AvailableMCPList, AvailableMCPpane);
            }
        });
        
        CurMCPList.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent evt){
                if(evt.getClickCount() >= 2){
                    Route route = Function.getRouteByName(RouteChooser.getSelectedItem().toString());
                    int MCPid = Integer.parseInt(CurMCPList.getSelectedValue().toString().split("MCP ")[1]); 
                    MCP mcp = Function.getMcpByID(MCPid);
                    mcp.route = null;
                    route.ListMCPs.remove(mcp);
                    route.setDistance();
                    CurrentMCP.removeElement("MCP " + mcp.id);
                    AvailableMCP.addElement("MCP "+mcp.id);
                    Function.showObjectonList(CurrentMCP, CurMCPList, CurMCPpane);
                    Function.showObjectonList(AvailableMCP, AvailableMCPList,AvailableMCPpane);
                }
            }
        });
        
        AvailableMCPList.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent evt){
                if(evt.getClickCount() >= 2){
                    Route route = Function.getRouteByName(RouteChooser.getSelectedItem().toString());
                    int MCPid = Integer.parseInt(AvailableMCPList.getSelectedValue().toString().split("MCP ")[1]);
                    MCP mcp = Function.getMcpByID(MCPid);
                    mcp.route = route;
                    route.ListMCPs.add(mcp);
                    route.setDistance();
                    CurrentMCP.addElement("MCP " + mcp.id);
                    AvailableMCP.removeElement("MCP "+mcp.id);
                    Function.showObjectonList(CurrentMCP, CurMCPList, CurMCPpane);
                    Function.showObjectonList(AvailableMCP, AvailableMCPList,AvailableMCPpane);
                }
                
            }
        });
        
        this.jPanel1.add(RouteLabel);
        RouteLabel.setBounds(35, 10, 100, 20);
        
        this.jPanel1.add(RouteChooser);
        RouteChooser.setBounds(35, 30, 100, 30);
        
        this.jPanel1.add(CurMCPs);
        CurMCPs.setBounds(35, 60, 100, 20);
        
        this.jPanel1.add(CurMCPpane);
        CurMCPpane.setBounds(35, 80, 130, 80);
        
        this.jPanel1.add(RemoveButton);
        RemoveButton.setBounds(60,160,80,25);
        
        this.jPanel1.add(AvaiMCP);
        AvaiMCP.setBounds(35,185,100,20);
        
        this.jPanel1.add(AvailableMCPpane);
        AvailableMCPpane.setBounds(35, 205, 130, 90);
        
        this.jPanel1.add(AddButton);
        AddButton.setBounds(75,300,50,25);
        
        AddButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt){
                Route route = Function.getRouteByName(RouteChooser.getSelectedItem().toString());
                    int MCPid = Integer.parseInt(AvailableMCPList.getSelectedValue().toString().split("MCP ")[1]);
                    MCP mcp = Function.getMcpByID(MCPid);
                    mcp.route = route;
                    route.ListMCPs.add(mcp);
                    route.setDistance();
                    CurrentMCP.addElement("MCP " + mcp.id);
                    AvailableMCP.removeElement("MCP "+mcp.id);
                    Function.showObjectonList(CurrentMCP, CurMCPList, CurMCPpane);
                    Function.showObjectonList(AvailableMCP, AvailableMCPList,AvailableMCPpane);
            }
        });
        
        RemoveButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt){
                Route route = Function.getRouteByName(RouteChooser.getSelectedItem().toString());
                int MCPid = Integer.parseInt(CurMCPList.getSelectedValue().toString().split("MCP ")[1]); 
                MCP mcp = Function.getMcpByID(MCPid);
                mcp.route = null;
                route.ListMCPs.remove(mcp);
                route.setDistance();
                CurrentMCP.removeElement("MCP " + mcp.id);
                AvailableMCP.addElement("MCP "+mcp.id);
                Function.showObjectonList(CurrentMCP, CurMCPList, CurMCPpane);
                Function.showObjectonList(AvailableMCP, AvailableMCPList,AvailableMCPpane);
            }
        });
    }//GEN-LAST:event_ManageRouteButtonActionPerformed

    private void AssignVecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignVecButtonActionPerformed
        // TODO add your handling code here:
        this.jPanel1.removeAll();
        this.jPanel1.repaint();
        System.out.println("Routing : Clicked AssignVecButton");
        JLabel RouteLabel = new JLabel("Choose a Route:");
        JComboBox RouteChooser = new JComboBox();
        JLabel VecLabel = new JLabel("Choose a Vec:");
        JButton AssignButton = new JButton("Assign");
        JComboBox VecChooser = new JComboBox();
        
        int size = this.data.Routes_data.size();
        for(int i = 0 ; i < size ; i++){
            RouteChooser.addItem(this.data.Routes_data.get(i).name);
        }
        
        size = this.data.Vechicles_data.size();
        for(int i = 0 ; i < size ; i++){
            VecChooser.addItem("Vechicle "+this.data.Vechicles_data.get(i).id);
        }
        
        this.jPanel1.add(RouteLabel);
        RouteLabel.setBounds(30, 40, 100, 20);
        
        this.jPanel1.add(VecLabel);
        VecLabel.setBounds(30,140,100,30);
        
        this.jPanel1.add(AssignButton);
        AssignButton.setBounds(65,270,70,35);
        
        this.jPanel1.add(RouteChooser);
        RouteChooser.setBounds(30, 70, 100, 30);
        
        this.jPanel1.add(VecChooser);
        VecChooser.setBounds(30,180,100,30);
        
        VecChooser.setSelectedIndex(-1);
        RouteChooser.setSelectedIndex(-1);
        
        AssignButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt){
                String Route = RouteChooser.getSelectedItem().toString();
                int  VecID = Integer.parseInt(VecChooser.getSelectedItem()
                                        .toString().split("Vechicle ")[1]);
                Route route = Function.getRouteByName(Route);
                Vechicle vec = Function.getVecByID(VecID);
                if(route.optimized==true || vec.optimzed == true){
                    int ret = JOptionPane.showConfirmDialog(Routing.this,"This Route or Vechicle is optimized. Do you still want to assign?","Confirm",0);
                    if(ret != 0) return;
                }
                if(route.vechicle != null){
                    route.vechicle.optimzed = false;
                    route.vechicle.route = null;
                }
                if(vec.route != null){
                    vec.route.optimized = false;
                    vec.route.vechicle = null;
                }
                route.vechicle = vec;
                vec.route = route;
                if(!vec.Not_Optimized.contains(vec)){
                    vec.optimzed = false;
                    vec.Not_Optimized.add(vec);
                }
                if(!route.Not_Optimized.contains(route)){
                    route.optimized = false;
                    route.Not_Optimized.add(route);
                }
                JOptionPane.showMessageDialog(Routing.this,"Assigned");
                AssignVecButtonActionPerformed(evt);
            }
        });      
    }//GEN-LAST:event_AssignVecButtonActionPerformed




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignVecButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton CreateRouteButton;
    private javax.swing.JButton ManageRouteButton;
    private javax.swing.JButton OptimizeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
